openapi: 3.0.1
info:
  title: Rentigo API
  description: API documentation for the Rentigo backend application.
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input, e.g., username or email already exists

  /api/auth/login:
    post:
      summary: Log in a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxIiwidSI6InRlc3R1c2VyIiwiciI6IlJPTEVfVVNFUiIsImlhdCI6MTcxODc4NDAwMCwiZXhwIjoxNzE4ODYwNDAwfQ.signature"
        '401':
          description: Authentication failed, invalid credentials

  /api/users/me:
    get:
      summary: Get current user details
      tags:
        - User
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful retrieval of user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized if token is missing or invalid

  /api/users/{id}/password:
    put:
      summary: Change user password
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid request, e.g., old password mismatch
        '401':
          description: Unauthorized

  /api/admin/users:
    get:
      summary: List all users (Admin only)
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: Page number
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: Page size
      responses:
        '200':
          description: A paginated list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfUserResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden if user is not an admin

  /api/admin/users/{id}/roles:
    put:
      summary: Update user roles (Admin only)
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
              example: [1, 2]
      responses:
        '200':
          description: Roles updated successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden if user is not an admin

components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: "newuser"
        email:
          type: string
          format: email
          example: "newuser@example.com"
        password:
          type: string
          format: password
          example: "password123"
      required:
        - username
        - email
        - password

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "testuser"
        password:
          type: string
          format: password
          example: "password123"
      required:
        - username
        - password

    PasswordChangeRequest:
      type: object
      properties:
        oldPassword:
          type: string
          format: password
          example: "currentPassword"
        newPassword:
          type: string
          format: password
          example: "newStrongPassword"
      required:
        - oldPassword
        - newPassword

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        status:
          type: integer
        roles:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PageOfUserResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        totalPages:
          type: integer
        totalElements:
          type: integer
          format: int64
        last:
          type: boolean
        size:
          type: integer
        number:
          type: integer
        first:
          type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
